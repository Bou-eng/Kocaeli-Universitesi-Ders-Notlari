{\rtf1\ansi\ansicpg1254\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red170\green13\blue145;\red0\green0\blue0;\red0\green116\blue0;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c11000\c0\c81000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15960\viewh10320\viewkind0
\deftab890
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \cb3 #include \cf4 <pthread.h>
\f1\fs24 \cf0 \

\f0\fs36 \cf2 #include \cf4 <stdio.h>
\f1\fs24 \cf0 \
\

\f0\fs36 \cf5 int\cf6  sum; \cf7 /* this data is shared by the thread(s) */
\f1\fs24 \cf0 \
\

\f0\fs36 \cf5 void\cf6  *runner(\cf5 void\cf6  *param); \cf7 /* the thread */
\f1\fs24 \cf0 \
\

\f0\fs36 \cf5 int\cf6  main(\cf5 int\cf6  argc, \cf5 char\cf6  *argv[])
\f1\fs24 \cf0 \

\f0\fs36 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_t tid; \cf7 /* the thread identifier */
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_attr_t attr; \cf7 /* set of attributes for the thread */
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 if\cf6  (argc != \cf8 2\cf6 ) \{
\f1\fs24 \cf0 \

\f0\fs36 \cf6         fprintf(stderr,\cf4 "usage: a.out <integer value>\\n"\cf6 );
\f1\fs24 \cf0 \

\f0\fs36 \cf6         \cf7 /*exit(1);*/
\f1\fs24 \cf0 \

\f0\fs36 \cf6         \cf5 return\cf6  -\cf8 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 if\cf6  (atoi(argv[\cf8 1\cf6 ]) < \cf8 0\cf6 ) \{
\f1\fs24 \cf0 \

\f0\fs36 \cf6         fprintf(stderr,\cf4 "Argument %d must be non-negative\\n"\cf6 ,atoi(argv[\cf8 1\cf6 ]));
\f1\fs24 \cf0 \

\f0\fs36 \cf6         \cf7 /*exit(1);*/
\f1\fs24 \cf0 \

\f0\fs36 \cf6         \cf5 return\cf6  -\cf8 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf7 /* get the default attributes */
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_attr_init(&attr);
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf7 /* create the thread */
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_create(&tid,&attr,runner,argv[\cf8 1\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf7 /* now wait for the thread to exit */
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_join(tid,\cf5 NULL\cf6 );
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     printf(\cf4 "sum = %d\\n"\cf6 ,sum);
\f1\fs24 \cf0 \

\f0\fs36 \cf6 \}
\f1\fs24 \cf0 \

\f0\fs36 \cf7 /**
\f1\fs24 \cf0 \

\f0\fs36 \cf7  * The thread will begin control in this function
\f1\fs24 \cf0 \

\f0\fs36 \cf7  */
\f1\fs24 \cf0 \

\f0\fs36 \cf5 void\cf6  *runner(\cf5 void\cf6  *param)
\f1\fs24 \cf0 \

\f0\fs36 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 int\cf6  i, upper = atoi(param);
\f1\fs24 \cf0 \

\f0\fs36 \cf6     sum = \cf8 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 if\cf6  (upper > \cf8 0\cf6 ) \{
\f1\fs24 \cf0 \

\f0\fs36 \cf6         \cf5 for\cf6  (i = \cf8 1\cf6 ; i <= upper; i++)
\f1\fs24 \cf0 \

\f0\fs36 \cf6             sum += i;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_exit(\cf8 0\cf6 );
\f1\fs24 \cf0 \

\f0\fs36 \cf6 \}
\f1\fs24 \cf0 \
\
\
// gcc main.c -o \'85\'85\
//    ./\'85. say\uc0\u305 \
\
\
\
\'d6rnek 2:\

\f0\fs36 \cf2 #include \cf4 <pthread.h>
\f1\fs24 \cf0 \

\f0\fs36 \cf2 #include \cf4 <stdio.h>
\f1\fs24 \cf0 \
\

\f0\fs36 \cf5 typedef\cf6  \cf5 struct\cf6  thread_data \{
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 int\cf6  a;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 int\cf6  b;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 int\cf6  result;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6 \} thread_data;
\f1\fs24 \cf0 \
\

\f0\fs36 \cf5 void\cf6  *myThread(\cf5 void\cf6  *arg)
\f1\fs24 \cf0 \

\f0\fs36 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs36 \cf6     thread_data *tdata=(thread_data *)arg;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 int\cf6  a=tdata->a;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 int\cf6  b=tdata->b;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 int\cf6  result=a+b;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     tdata->result=result;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_exit(\cf5 NULL\cf6 );
\f1\fs24 \cf0 \

\f0\fs36 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs36 \cf5 int\cf6  main()
\f1\fs24 \cf0 \

\f0\fs36 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_t tid;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     thread_data tdata;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     tdata.a=\cf8 10\cf6 ;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     tdata.b=\cf8 32\cf6 ;
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_create(&tid, \cf5 NULL\cf6 , myThread, (\cf5 void\cf6  *)&tdata);
\f1\fs24 \cf0 \

\f0\fs36 \cf6     pthread_join(tid, \cf5 NULL\cf6 );
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     printf(\cf4 "%d + %d = %d\\n"\cf6 , tdata.a, tdata.b, tdata.result);
\f1\fs24 \cf0 \

\f0\fs36 \cf6     
\f1\fs24 \cf0 \

\f0\fs36 \cf6     \cf5 return\cf6  \cf8 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs36 \cf6 \}
\f1\fs24 \cf0 \
\
\
}